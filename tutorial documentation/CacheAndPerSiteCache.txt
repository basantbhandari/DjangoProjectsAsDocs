===========================================
    Cache
===========================================
    A Cache is an information technology for the temporary storage (Caching) of Wen documents, such as
    Web pages, images, and other types of Web multimedia, to reduce server lag.

    Caching is one of those methods which a website implements to become faster. It is cost efficient and 
    saves CPU processing time.

    Django comes with a robust cache system that lets you save dynamic pages so they don't have to be 
    calculated for each request.


    You can cache the output of specific views, you can cache only the pieces that are different to 
    produce, or you can cache your entire site.


    Following are the options of caching:
        Database Caching
        File System Caching
        Local Memory Caching

========================================
    How to implement Caching
========================================
    The per-site cache : Once the cache is set up, the simplest way to use caching is to cache your
        entire site.

    The per-view cache : A more grabular way to use the caching framework is by caching the output of individual views.

    Template fragment caching : This gives you more control what to cache.



========================================
    The per-site cache
========================================
    The per-site cache - Once the cache is set up, the simplest way to use caching is to cache your entire site.

    MIDDLEWARE = [
        'django.middleware.cache.UpdateCacheMiddleware',
        'django.middleware.cache.CommonMiddleware',
        'django.middleware.cache.FetchFromCacheMiddleware',
    ]


    CACHE_MIDDLEWARE_ALIAS - The cache alias to use for storage.

    CACHE_MIDDLEWARE_SECONDS - The number of seconds each page should be cached.
   
    CACHE_MIDDLEWARE_KEY_PREFIX - If the cache is shared across multiple sites using the same Django
    installation, set this to the name of the site, or some other string that is unique to this Django instance, to prevent
    key collisions. Use an empty string if you don,t care.





========================================
    Database Caching
========================================
    Django can store it is cached data in your database. This works best if you have got a fast, well-indexed database
    server.

    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'my_cache_table',  # table should be different then other table
        }
    }



    Before using the database cache, you must crete the cache table with this command:

    python manage.py createcachetable

    This creates a table in your database that is in the proper format that Django's database-cache system expects.
    The name of the table is taken from LOCATION.

    If you are using multiple database cache, createcachetable creates one table for each cache.



========================================
    Cache Arguments
========================================
    Each cache backend can be given additional arguments to control caching behavior.

    TIMEOUT : The default timeout, in seconds, to use for the cache. This argument defaults to 300 seconds (5 minutes). You 
    can set TIMEOUT to None so that, by defaults to 300 seconds(5 minutes). You can 
    set TIMEOUT to None so that, by default, cache keys never expire. A value of 0 causes keys to immediately expire 
    (effectively "don't cache").

    OPTIONS : Any options that should be passed to the backend. The list of valid options will very with each backend, and 
    cache backends backed by a third-party library will pass their options directly to the underlying cache library.


    Cache backends that implement their own culling strategy (i.e., the locmem, filesystem and database backends) will honor the
    following options:

    MAX_ENTRIES : The maximum number of entries allowed in the cache before ald values are deleted. This argument defaults
    to 300.

    CULL_FREQUENCY : The fraction of entries that are culled when MAX_ENTRIES is reached. The actual ratio is 1 /
    CULL_FREQUENCY, so set CULL_FREQUENCY to 2 to cull half the entries when MAX_ENTRIES is reached. This 
    argument should be an integer and defaults to 3.

    A value of 0 for CULL_FREQUENCY means that the entire cache will be dumped when MAX_ENTRIES is reached. On 
    some backends(database in particular) this makes culling much faster at the expense of more cache misses.




    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'my_cache_table',  # table should be different then other table
            'TIMEOUT': 60,
            'OPTIONS': {
                'MAX_ENTRIES': 1000
            }
       
        }
    }


============================================
refer to the project p71 in djago code 



===================================================
    Filesystem Caching
===================================================
    The file-based backend serializes and stores each cache value as a seperate file.


    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
            'LOCATION': 'c:/Django code/p72',  # table should be different then other table
        }
    }


    Make sure the directory pointed-to by this setting exists and is readable and writable by the system user under 
    which your Web server runs.



    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
            'LOCATION': '/var/tmp/django_code',  # table should be different then other table
        }
    }



============================================
refer to the project p72 in djago code 





===================================================
    Local Memory Caching
===================================================
    This is the default cache if another is not specified in your settings file. This cache is per-process and thread-safe.

    Each process will have its own private cache instance, which means no cross-process caching is possibl. This 
    obviously also means the local memory cache isn't particularly memory-efficient.

    It's probably not a good choice for production environments. It is nice for development.


    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake', 
        }
    }

============================================
refer to the project p73 in djago code 



NOTE : database cacheing is prefered