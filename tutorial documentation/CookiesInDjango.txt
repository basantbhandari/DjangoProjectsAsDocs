Django Cookies
================
    HttpRequest.COOKIES : A dictionarycontaining all cookies. Keys and values are strings.

Creating Cookies
=================
    set_cookie() : set_cookie() is used to set/create/sent cookies.
    Syntax: HttpRequest.set_cookie(key, value=", max_age=None, expires=None, path='/', domain=None,
    secure=False, httponly=False, samesite=None
    )

    Example: set_cookie("name", "sonam")

    key : This is the name of the cookie.

    value : This sets the value of cookie. This value is stored on the clients computer.
            name and value are required to set cookie.

    when you omit the optional cookie fields, the browser fills them in automatically with reasonable defaults.


    max_age : It should be a number of seconds, or None(defaults) if the cookie should last only as long as
              the client's browser session. If expires is not specified, it will be calculated.

              Example: set_cookie("name", 'sonam', max_age= 60*60*24*10)     // 10 days


    expires : It describes the time when cookie will be expire. It should either be a string in the format "Wdy,
              DD-Mon-YY HH:MM:SS GMT" or a datetime.datetime object in UTC. If expires ia a datetime object,
              the max_age will be calculated.

            Example: set_cookie("name", "sonam", expires=datetime.utcnow() + timedelta(days=2))


            note.geekyshows.com
            code.geekyshows.com

            Example: set_cookie("name", "sonam", "code.geekyshows.com")

            secure : Cookie to only be transmitted over secure protocol as https. When set to TRUE, the cookie will
            only be set if a secure connection exits.

            Example: 
                set_cookie("name", "sonam", max_age=60*60*24*10, path="/",
                domain = "geekyshows.com", secure=True)


            httponly : Use httponly=True if you want to prevent client-side JavaScript from having access to the 
            cookie.

            HttpOnly is a flag included in a Set-Cookie HTTP response header. It is part of the RFC 6265 standard for cookies and can 
            be a useful way to mitigate the risk of a client-side script acccessing the protected cookie data.


            Example: set_cookie("name", "sonam", max_age=60*6-*24*10, httponly=True)


            samesite : Use samesite="Strict" or samesite="Lax" to tell the browser not to send this cookie when 
            performing a cross-origin request request. SameSite isn't supported by all browsers, so it's not a replacement for
            Django's CSRF protection, but rather a defense in depth measure.


    RFC 6265 states that user agents should support cookies of at leased 4096 bytes. For many browsers this is also the maximum size. Django will not raise an exception if there's an attempt to store a cookie of more than 4096 bytes, 
    but many browser will not set the cookie correctly.
    Example: set_cookie("name", "sonam", samesite=''Strict)

===============================================
    Reading/Accessing Cookie
===============================================
    HttpRequest.COOKIES : A dictionary containing all cookies. Keys and values are strings.
    Syntax : request.COOKIES['key'];
    Example : request.COOKIES['name'];

    Syntax : request.COOKIES.get('key', defaults)
    Example : request.COOKIES.get('name')
    Example : request.COOKIES.get('name', "Guest")




    When we assign a new value to cookie, the current cookie are not replaced. The new cookie is parsed 
    and it's name-value pair is appended to the list. The exception is when you assign a new cookie with the same
    name (and same domain and path, if they exit) as a cookie that already exits. In this case the old value is 
    replaced with the new.

    Example:
            (Replace)
        set_cookie("name", "sonam")
        set_cookie("name", "rahul")

            (Append)
        set_cookie("name", "sonam")
        set_cookie("lname", "jha")



==========================================
        Deleting Cookies
==========================================
    HttpResponse.delete_cookie(key, path='/', domain=None) : This method is used to delete the cookie 
    based on given key with same domain and path, if they were set, otherwise the cookie may not be deleted.

    Example: delete_cookie("name")



==========================================
refer to Django p61 django code

==========================================
        Creating Signed Cookies
==========================================
    HttpResponse.set_signed_cookie(key, value, salt=", max_age=None, expires=None, path='/',
    domain=None, secure=False, httponly=False, samesite=None)

    It is similar to set_cookie(), but cryptographic signing the cookie before setting it. Use in conjuction
    with HttpRequest.get_signed_cookie().

    You can use the optional salt argument for added key strength, but you will need to remember to pass 
    it to the corresponding HttpRequest.get_signed_cookie() call.



==========================================
        Getting Signed Cookies
==========================================

    HttpRequest.get_signed_cookie(key, default=RAISE_ERROR, selt=", max_age=None)

    It returns a cookie value for a signed cookie, or raises a django.core.signing.BadSignature exception 
    if the signature is no longer valid.

    If you provide the default argument the exception will be suppressed and that default value will be returned instead.

    The optional salt argument can be used to provide extra protection against brute force attacks on your
    secret key. If supplied, the max_age argument will be checked agained timestamp attached 
    to the cookie value to ensure the cookie is not older then max_age seconds.


==========================================
refer to Django p62 django code



=================================
Cookie Security Isseuse
=================================
    Can misuse Client Details
    Can track User
    Client Can Delete Cookies
    Client can Manipulate Cookies




=================================
Cookie Limitation
=================================
    Each cookie can contain 4096 bytes Data
    Cookies can be stored in Browser and server
    It is sent with each request


    




