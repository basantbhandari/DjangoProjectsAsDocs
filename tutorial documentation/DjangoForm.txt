Django Form
==================
    Django's form functionality can simplify and automate vast portions of work like data
    prepared for display in a form, rendered as HTML, edit using a convenient interface,
    retured to the server, validated and cleaned up etc and can also do it more securely then 
    most programmers would be able to do in code they wrote themselves.

Django handles three distinct parts of the work involved informs.
    preparing and restructuring data to make it ready for rendering
    creating HTML forms for the data.
    receiving and processing submitted froms and data form the client.

Bound and Unbound Forms:
============================
    If it is bound to a set of data, it is capable of validating that data and rendering the form as HTMl with the data displayed in the HTML.

    If it is unbound, it can not do validation (because there's no data to validate!), but it can still render the blank form as HTML.



Create Django Form using Form Class
======================================
    To create Django form we have to create a new file inside application folder lets say file say file name is forms.py. Now we can write below code inside forms.py to create a form.

    Syntax:
        from django import forms
        class FormClassName(forms.Form):
            label = forms.FieldType()
            label = forms.FieldType(label='display_label')


    Example:
        from django import forms
        class StudentRegistration(forms.Form):
            name = forms.CharField()              # Here length is not required
            email = forms.EmailField()



Display Form to User
===========================
    Create an object of Form class in views.py then pass object to template files
    Use Form object in template file


Creating Form object in views.py
==================================
    First of all create form object inside views.py file then pass this object to template file as a dict.
    views.py
    =========
        from .forms import StudentRegistration
        def showformdata(request):
            fm = StudentRegistration()
            return render(request, 'enroll/userregistration.html', {'form': fm})




Get object from views.py in template file
==========================================
    templates/enroll/userregistration.html
    <!DOCTYPE html>
    <html>
        <body>
            {{form}}
        </body>
    </html>


    The form object has equivalent html code as below:
        <tr>
            <th><label for="id_name">Name: </label></th>
            <td><input type="text" name="name" required id="id_name"</td>
        </tr>
        <tr>
            <th><label for="id_email">Email: </label></th>
            <td><input type="email" name="email" required id="id_email"</td>
        </tr>

    Note: Form object won't provide form tag and button you have to write them manually in template file.

    There fore code will something look like
    =========================================
    templates/enroll/userregistration.html
    <!DOCTYPE html>
    <html>
        <body>
            <form action="" method="get">
                 {{form}}
            <input type="submit" value="Submit">
            </form>
        </body>
    </html>

    It has equivalent code like:
    templates/enroll/userregistration.html
    <!DOCTYPE html>
    <html>
        <body>
            <form action="" method="get">
                <tr>
                    <th><label for="id_name">Name: </label></th>
                    <td><input type="text" name="name" required id="id_name"</td>
                </tr>
                <tr>
                    <th><label for="id_email">Email: </label></th>
                    <td><input type="email" name="email" required id="id_email"</td>
                </tr>
            <input type="submit" value="Submit">
            </form>
        </body>
    </html>


    The output does not include the <table>and<//table> tags, nor does it include the <form> and </form>
        tags or an <input type="submit"> tag. It is your job to do that.
    Each field type has a default HTML representation. CharField is represented by an <input type="text">
        and EmailField by an <input type="email">.
    The HTML name for each tag is taken directely from it's attribute name in the StudentRegistration class.
    The text label for each field e.g. 'Name:' and 'Email:' is generated from the field name by converting all
        underdcores to spaces and upper-casing the first letter.
    
    Each text label is surrounded in an HTML <label> tag, which points to the appropriate from field via its id.

    Its id, in turm, is generated by prepending 'id_' to the field name. The id attribute and <label> tags are included in the output by default.

    The output uses HTML5 Syntax, targeting <!DOCTYPE html>




Refer project p24 in django code


Form Rendering Options
========================
    {{form}} will render them all
    {{form.as_table}} will render them all as table cells wrapped in <tr> tags
    {{form.as_p}} will render them wrapped in <p> tags
    {{form.as_ul}} will render them wrapped in <li> tags
    {{form.name_of_field}} will render field manually as given



    Example:
        <form action='' method="get">
            {{form}}
        </form>

        can be written as
        <form action='' method="get">
            {{form.as_p}}
        </form>






















