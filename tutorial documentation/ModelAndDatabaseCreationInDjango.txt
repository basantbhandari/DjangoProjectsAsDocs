Model
=========
    A model is the single, definitive source of information about your data.
    It contains the essential fields and behaviors of the data you are storing.
    Generally, each mmodel maps to a single database table.


Model Class
==============
    Model class is a class which will represent a table in database.
    Each model is a Python class that subclasses django.db.models.Model
    Each attribute of the model represents a database field.
    With all of this, Django gives you an automatically-generated database-access API
    Django provides built-in database by default that is sqlite database.
    We can use other database like MySQL, Oracle SQL etc.



Create Our Own Model Class
===============================
    models.py file which is inside application folder, is required to create our own model class.
    Our own model class will inherit Python's Model Class.

    Syntax:
        class ClassName(models.Model):
            field_name = models.FieldType(arg, options)

    Example:
        models.py
        ==========
            class Student(models.Model):
                stuid=models.IntegerField()
                stuname=models.CharField(max_length=70)
                stuemail=models.EmailField(max_length=70)
                stupass=models.CharField(max_length=70)

Note:
        Length is required in CharField Type
        This class will create a table with columns and their data types
        Table Name will be ApplicationName_ClassName, in this case it will be enroll_student

        Field name will become table's Column Name, in this case it will be stuid, stuname, stuemail, stupass with their data type.
        As we have not automatically create a new column named 'id' Data Type Integer with primary key and auto increment.
    
    This code is internally generated by ORM
    ===========================================

        CREATE TABLE "enroll_student"(
            "id" integer NOT NULL PRIMARY KEY AUTOINCREMENT,
            "stuid" integer NOT NULL,
            "stuname" varchar(70) NOT NULL,
            "stuemail" varchar(70) NOT NULL,
            "stupass" varchar(70) NOT NULL

        )

Rules
==========
    Field Name instantiated as a class attribute and represents a particular table's Column name.
    Field Type is also known as Data Type.
    A field name can not be a Python researved word, because that would result in a Python Syntax error.
    A field name cannot contain more than one underscore in a row, due to the way Django's query lookup Syntax works.
    A field name cannot end with an underscore.


How to use Models
=================
    Once you have defined your models, you need to tell Django you're going to use those models.
        Open settings.py file.
        Write app name which contains models.py file in INSTALLED_APPS=[]
        Open Terminal
        Run python manage.py  makemigrations
        Run python manage.py migrate



 Migrations
 =============
    Migrations are Django's way of propagating changes you make to your models (adding a field,
    deleting a model, etc.) into your database schema.

        makemigrations: This is responsible for creating new migrations based on the changes you have made to your models.
        migrate: This is responsible for applying and unapplying migrations.
        sqlmigrate: This displays the SQL statements for a migration.
        showmigrations: This lists a project's migrations and their status.


makemigrations and migrate
============================
    makemigrations is used convert model class into sql statements. This will 
        also create a file which will contain sql statements. This file is located in Application's migrations folder.

        Syntax: 
            python manage.py makemigrations
        eg: app_name/migrations/0001_initial.py file gets created

    migrate is used to execute sql statements generated by makemigrations. This
        command will execute All Application's (including built-in applications)
        SQL statements if available. After execution of sql statements table will be created.

            Syntax: python manage.py migrate

    Note:
        If you make any change in your own model class you are required to run makemigrations and migrate command only then you will get those
        changes in your application.


Display SQL Statement
=========================
    We can retrive SQL Statement by using below command:
        Syntax:
            python manage.py sqlmigrate application_name dbfile_name
        Example:
            python manage.py sqlmigrate enroll 0001

    Note: File name can be found inside Application's migrations folder.





============================================
    Geeky Steps
============================================
    Create Django Project: django-admin startproject geekyshows
    Create Django Application: python manage.py startapp enroll
    Add/Install Applications to Django Project using settings.py INSTALLED_APPS
    Create templates folder inside application
    Create static folder inside application
    Open model.py file which is inside application
    Write models.py file which is inside application
    Write Model Class
    Run python manage.py makemigrations Command
    A migration file will be generate automatically inside migrations folder
    Run python manage.py migrate Command
    Database table will be created automatically
    Write View Function inside views.py file
    Define url for view function of application using urls.py file.
    Write Template files code
    Write static file code



Built-in Field Options
=======================
    null- It can contain either True or False. If True, Django will store empty values as NULL in the database. Default is False.

    Avoid using null on string-based fields such as CharField and TextField. If a string-based field has null=True, that means it has two possible values for "no data": NULL, and the empty string.

    Example: null=True/False
    
    
    and so on.

Model Operations
===================
    CreateModel(name, fields, options-None, bases=None, managers=None)
    DeleteModel(name)
    RenameModel(old_name, new_name)
    AlterModelTable(name, table)

    and so on.





Refer in project p19 in Django code












