==============================================
        Model Inheritance 
==============================================
    Model Inheritance in django works almost identically to the way normal class inheritance works in Python.
    The base class should subclass django.db.models.Model.

    Abstract Base classes
    =======================
        Abstract base classes are useful when you want to put some common information into a number of 
        other models. 

        You write your base class and put abstract=True in the Meta class. 
        This model will then not be used to create any database table. Instead, when it is used as a base class 
        for other models, it is fields will be added to those of the chiled class. 

        It does not generate a database table or have a manager , and cannot be instantiated or saved directely. 
        
        Fields inherited from adstract base classes can be overriden with another field or value, or be 
        removed with None. 

        Syntax : 
            from django.db.models.Models
            class CommonInfo(models.Model):
                name = models.CharField(max_length=70)
                age = models.IntegerField()
                class Meta:
                    abstract = True 
            
            class Student(CommonInfo):
                fees = models.IntegerField()

            class Teacher(CommonInfo):
                fees = models.IntegerField()

        Meta Inheritance: When an abstract base class is created, Django makes any Meta inner class you declared in 
        the base class available as attribute.

        If a child class does not declare its own Meta class, it will inherit the parent's Meta. 

        If the child want to extend the parent is Meta class, it can subclass it. 
        Django does make one adjustment to the Meta class of an abstract base class, before installing the Meta 
        attrubute, it sets abstract=False.

        This means that children of abstract base classes do not automatically becomes abstract classes themselves. 

        You can make an abstract base class that inherits from another abstract base class. You just need to remember to 
        explicitly set abstract=True each time. 

        Syntax : 
            from django.db.models.Models
            class CommonInfo(models.Model):
                name = models.CharField(max_length=70)
                age = models.IntegerField()
                class Meta:
                    abstract = True 
            
            class Student(CommonInfo):
                fees = models.IntegerField()
                class Meta:
                  abstract = False 

        When you using related_name or related_query_name in an abstract base class (only), part of the value 
        should contain '%(app_lavel)s' and '%(class)s'. 

            '%(class)s' is replaced by the lowercased name of the child class that the field is used in. 
            '%(app_lavel)' is replaced by the lowercased name of the app the child class is contained within. Each 
                installed application name must be unique and the model class names within each app must also be unique, 
                therefore the resulting name will end up being different. 

            from django.db import models 
            class Base(models.Model):
                m2m = models.ManyToManyField(
                    OtherModel, 
                    related_name = "%(app_lavel)s_%(class)s_related",
                    related_query_name = "%(app_lavel)s_%(class)ss",
                )

                class Meta: 
                    abstract = True
            class ChildA(Base):
                pass 
                
            class ChildB(Base):
                pass 




=========================================
    Refer to project p95 in django code
=========================================


    Multi-table inheritance 
    =========================
        In this inheritance each model have their own database table, which means base class and child class will have their
        own table.
        The inheritace relationship introduces links beetwen the child model and each of it is parent (
            via an automatically-created OneToOneField
        )

        from django.db.models.Models

        class ExamCenter(models.Model):
            cname = models.CharField(max_length=70)
            city = models.CharField(max_length=70)

        class Student(ExamCenter):
            name = models.CharField(max_length=70)
            roll = models.CharField()
        
        All of the fields of ExampCenter will also be available in Student, although the data will reside in a different 
        database table.





=========================================
    Refer to project p96 in django code
=========================================







    ===============
    Proxy Models 
    ===============
        Sometimes, however, you only want to change the python behaviour od a model, perhaps to change the default 
        manager, or add a new method.

        This is what proxy model model inheritance is for: creating a proxy for the original model. You can create, delete and 
        update instance of the proxy model and all the data will be saved as if you were using the original (non-
        proxied) model. The difference is that you can change things like the default model ordering or the default
        manager in the proxy, without having to alter the original. 

        Proxy models are declared like normal models. You tell Django that it is proxy model by setting the proxy 
        attribute of the Meta class to True.
        Example:

            from django.db.models.Models

            class ExamCenter(models.Model):
                cname = models.CharField(max_length=70)
                city = models.CharField(max_length=70)

            class MyExamCenter(ExamCenter):
                class Meta: 
                    proxy = True
                    ordering = ['city']
                    def do_sometihng(self):
                        pass 
            
            class MySome(ExamCenter):
                objects = NewManager()

                class Meta:
                    proxy = True
                    

        A proxy model must inherit from exactly one non-abstract model class. 

        You cannot inherit from multiple non-abstract models as the proxy model does not provide any connection 
        between the rows in the different database tables. 

        A proxy model can inherit from any number of abstract model classes, providing they do not define any 
        model fields. 

        A proxy model may also inherit from any number of proxy model that share a common non-abstract parent 
        class. 
        
        If you do not specify any model managers on a proxy model, it inherits the managers from it is model parents. 
        
        If you define a manager on the proxy model, it will become the default, although any managers defined on the parent classes will still be available. 






=========================================
    Refer to project p97 in django code
=========================================






