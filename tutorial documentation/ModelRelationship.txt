==================================================
    Model Relationship
==================================================
    Django offers ways to define the three most common types of database relationships 
        One to One Relationship
        Many to One Relationship
        Many to Many Relationship


    
    One to One Relationship
    ========================
        When one row of table A can be linked to one row of table B.

        One to One Relationship , to define a one-to-one relationship, use OneToOneField. You use it just 
        like any other Field type by including it as a class attribute of your model. 

        OneToOneField requires a positional argument, the class to which the model is related. 

        Syntax : OneToOneField(to, on_delete, parent_link=False, **options)

        Where, 
            to : The class to which the model is related. 
            on_delete : When an object refrenced by a ForeignKey is deleted, Django will emulate the bahaviour 
            of the SQL constraint specified by the on_delete argument. on_delete doesn't create an SQL constraint
            in the database. 

            parent_link : When True and used in a model in a model which inherits from another concrete model, indicates 
            that this field should be used as the link back to the parent class, rather than the extra OneToOneField
            which would normally be implicitly created by subclassing. 

            limit_choices_to : Sets a limit to the available choices for this field when this field is rendered using a 
            ModelForm or the admin(by default, all objects in the queryset are available to choose). Either a 
            dictionary, a Q object, or a callable returning a dictionary or Q object can be used. 

            related_name : The name to use for the relation from the related object back to this one. It is also the 
            default value for related_query_name (the name to use for the reverse filter name from thr targrt model ). 

            If you prefer Django not to create a backwards relation, set related_name to '+' or end it with '+'. 
            
            related_query_name : The name to use for the reverse filter name from the target model. It defaults to 
            the value of related_name or default_related_name if set, otherwise it defaults to the name of the 
            model. 

            to_field : The field on the related object that the relation is to. By default, Django uses the primary 
            key of the related object. If you reference a different field, that field must have unique=True. 

            swappable : Controls the migration framework's reaction if this ForeignKey is pointing at a 
            swappable model. If it is True - the default - then if the ForeignKey is pointing at a model which 
            matches the current value of settingf. AUTH_USER_MODEL (or another swappable model setting) 
            the relationship will be stored in the migration using a refrence to the setting, not to the model directly.

             db_contraint : Controls whether or not a constraint should be created in the database for this foreign 
             key. The default is True, and that is almost certainly what you want to do this: 

             You have legacy data that is not valid. 
             you are sharding your database. 
             If this is set to False, accessing a related object that doesn't exist will raise it is DoesNotExist 
             exception. 


             on_delete : When an object refrenced by a ForeignKey is deleted, Django will emulate the behavior of the SQL 
             constraint specified by the on_delete argument. on_delete doesn't create an SQL constraint in the database. 

             The possible values for on_delete are found in django.db.models:

                CASCADE : Cascade deletes. Django emulates the behavior of the SQL constraint ON DELETE CASCADE 
                    and also deletes the object containing the ForeignKey. 
                
                PROTECT : Prevent deletion of the refrenced object by raising ProtectionError, a subclass of 
                    django.db.IntegrityError. 
                
                SET_NULL : Set the ForeignKey null; this is only possible if null is True. 

                SET_DEFAULT : Set the ForeignKey to it is default value; a default for the ForeignKey must be set. 
                
                SET() : Set the ForeignKey to the value passed to SET(), or if a callable is passed in, the result of calling it. 
                
                DO_NOTHING : Take no action. If your database backend enforces referential integrity, this will cause an 
                IntegrityError unless you manually add an SQL ON DELETE constraint to the database field. 

            Example: 
                class User(models.Model):
                    user_name = models.CharField(max_length=70)
                    password = models.CharField(max_length=70)

                class Page(models.Model):
                    user = models.OneToOneField(User, on_delete=models.CASCADE)
                    page_name = models.CharField(max_length=70)
                    page_cat = models.CharField(max_length=70)
                    page_publish_date = models.DateField()

=================================================
    Refer to project p102 in django code
=================================================


for parent_link=True
=================================================
    Refer to project p103 in django code
=================================================








    Many to One Relationship
    ========================

    Many to Many Relationship
    ========================








