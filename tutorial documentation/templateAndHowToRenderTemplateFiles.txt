Template
==============
    A template is a text file. It can generate any text-based format (HTML, XML, CSV, etc.)
    A template contains variables, which control the logic of the template.
    Template is used by view function to represent the data to user.
    User sends request to view than contact template afterthat view get information from the template and then view gives response to the users.



Create Template Folder and Files
================================== 
    We create templates folder inside Project Folder. templates folder will contain all html files.
    geekyshows
        templates
        geekyshows
            __init__.py
            settings.py
            urls.py
            wsgi.py
        manage.py
        course
        fees



    geekyshows
        templates
            courseone.html
            coursetwo.html
            coursethree.html
            feesone.html
            feestwo.html
        geekyshows
            __init__.py
            settings.py
            urls.py
            wsgi.py
        manage.py
        course
        fees


Add Templates in settings.py
==============================
settings.py
===========
    TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')

    INSTALLED_APPS = [
        'course',
        'fees',
    ]

    TEMPLATES = [
        {
            'DIRS': [TEMPLATES_DIR],
        }
    ]


Geeky Steps
===============
    Create Django Project: django-admin startproject geekyshows
    Create Django Application1 : python manage.py startapp course
    Create Django Application2 : python manage.py startapp fees
    Add/Install Applications to Django Project (course and fees to geekyshows) using
        settings.py INSTALLED_APPS
    Create templates folder inside Root Project Directory
    Add templates directory in settings.py
        TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
            TEMPLATES = [{
                'DIRS': [TEMPLATES_DIR],
            }]

    Create template files inside templates folder
    Write View Function inside views.py file
    Define url for view function of application using urls.py file.




Refer to p6 in Project code section

Write Templates Files
=================================
    When we create Template file for the application we seperate business 
        logic and presentation from the application views.py file.


Rendering Templates Files
===============================
    By Creating Template file for application we seperate business logic and presentation
        from the application views.py file. Now we will write business logic in views.py file and 
        presentation code in html file.
    Still views.py will be responsible to process the template files for this we will use render()
        function in views.py file.

    views.py
    ========
        from django.shortcuts import render
        def function_name(request):
            Dynamic Data, if else, any python code logic
            return render(request, template_name, context=dict_name,
                          content_type = MIME_type, status=None, using=None)

        def learn_django(request):
            return render(request, 'courseone.html')


eg:
templates/
    courseone.html
        <html>
            <head>
                <style></style>
            </head>
            <body>
                <h1>Hello Django</h1>
            </body>
            <script></script>
        </html>


render()
================
    render() Function - It combines a given template with a given context dictionary and returns an 
        HttpResponse object with that rendered text.
    Syntax:
        render(request, template_name, context=dict_name, context_type = MIME_type, status=None, using=None)
        where,
            request - The request object used to generate this response.*

            template_name - The full name of a template to use or sequence of template names. If a sequence is given, 
                the first template that exits will be used.*

            context - A dictionary of values to add to the template context. By default, this is an empty dictionary. If a
                value in the dictionary is callable, the value will call it just before rendering the template.

            content_type - The MIME type to use for the resulting document. Defaults to 'text/html'.

            status - The status code for the response. Defaults to 200.

            using - The NAME of a template engine to use for loading the template.

Syntax:
    render(request, template_name, context= dict_name, content_type= MIME_type, status=None, using=None)

example:
    render(request, 'courseone.html', context = cname, context_type='application/xhtml+xml')



===========================
        Geeky Steps
===========================
    Create Django Project: django-admin startproject geekyshows
    Create Django Application1: python manage.py startapp course
    Create Django Application2: python manage.py startapp fees
    Add/Install Applications to Django Project(course and fees to geekyshows) using
        settings.py INSTALLED_APPS
    Create templates folder inside Root Project Directory

    Add templates directory in settings.py
        TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
        TEMPLATES = [{
            'DIRS': [TEMPLATES_DIR], 
        }]

    Create template files inside template folder
    Write View Function inside views.py file.
    Define url for view function of application using urls.py file
    Write Template files code


====================================
Refer to project p7 in project code:
====================================




